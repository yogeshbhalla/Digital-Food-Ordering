
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Main-Hall
 */
public class customerorderhistory extends javax.swing.JFrame {

    ArrayList<order> alorder = new ArrayList<>();
    ArrayList<orderdetail> aldetail = new ArrayList<>();
    ordertablemodel otm = new ordertablemodel();
    detailtablemodel dtm = new detailtablemodel();

    public customerorderhistory() {
        initComponents();
        setSize(750, 500);
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int x = ((d.width) - this.getWidth()) / 2;
        int y = ((d.height) - this.getHeight()) / 2;
        setLocation(x, y);
        tbpend.setModel(otm);
        tbdetails.setModel(dtm);
        jpanel1.setVisible(false);
        loadorders();
    }

    void loadorders() {
        try {
            HttpResponse<String> res = Unirest.get("http://localhost:8888/get_customer_order")
                    .queryString("mobileno", Global.mobileno)
                    .asString();
            String response = res.getBody();
            if (response.equals("") == false) {
                StringTokenizer st = new StringTokenizer(response, "~~~~");
                int n = st.countTokens();
                for (int i = 1; i <= n; i++) {
                    String row = st.nextToken();
                    StringTokenizer st2 = new StringTokenizer(row, "#$%");
                    String billid = st2.nextToken();
                    String mobileno = st2.nextToken();
                    String billdate = st2.nextToken();
                    String billtime = st2.nextToken();
                    String amount = st2.nextToken();
                    String tax = st2.nextToken();
                    String billamount = st2.nextToken();
                    order obj = new order(billid, billdate, billtime, mobileno, amount, tax, billamount);
                    alorder.add(obj);
                }
                otm.fireTableDataChanged();

            } else {
                JOptionPane.showMessageDialog(rootPane, "No pending order");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbpend = new javax.swing.JTable();
        btdetail = new javax.swing.JButton();
        jpanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbdetails = new javax.swing.JTable();

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Pending Orders");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(240, -10, 240, 70);

        tbpend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbpend);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 50, 690, 120);

        btdetail.setText("Details");
        btdetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btdetailActionPerformed(evt);
            }
        });
        getContentPane().add(btdetail);
        btdetail.setBounds(280, 180, 160, 30);

        tbdetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tbdetails);

        javax.swing.GroupLayout jpanel1Layout = new javax.swing.GroupLayout(jpanel1);
        jpanel1.setLayout(jpanel1Layout);
        jpanel1Layout.setHorizontalGroup(
            jpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addContainerGap())
        );
        jpanel1Layout.setVerticalGroup(
            jpanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        getContentPane().add(jpanel1);
        jpanel1.setBounds(10, 220, 700, 270);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btdetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btdetailActionPerformed
        // TODO add your handling code here:
        int index = tbpend.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(rootPane, "Please select an order first");
        } else {
            String billid = alorder.get(index).billid;
            System.out.println("billid " + billid);
            jpanel1.setVisible(true);
            try {
                HttpResponse<String> res = Unirest.get("http://localhost:8888/getdetailorder")
                        .queryString("billid", billid)
                        .asString();
                String response = res.getBody();
                if (response.equals("") == false) {
                    StringTokenizer st = new StringTokenizer(response, "~~~~");
                    int n = st.countTokens();
                    for (int i = 1; i <= n; i++) {
                        String row = st.nextToken();
                        StringTokenizer st2 = new StringTokenizer(row, "#$%");
                        String itemname = st2.nextToken();
                        String price = st2.nextToken();
                        String qty = st2.nextToken();
                        String totalprice = st2.nextToken();
                        orderdetail obj = new orderdetail(itemname, price, qty, totalprice);
                        aldetail.add(obj);
                    }
                    dtm.fireTableDataChanged();

                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_btdetailActionPerformed

   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(adminvieworder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(adminvieworder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(adminvieworder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(adminvieworder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new adminvieworder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btdetail;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable2;
    private javax.swing.JPanel jpanel1;
    private javax.swing.JTable tbdetails;
    private javax.swing.JTable tbpend;
    // End of variables declaration//GEN-END:variables

    class order {

        String billid, billdate, billtime, mobile, amount, tax, billamount;

        public order(String billid, String billdate, String billtime, String mobile, String amount, String tax, String billamount) {
            this.billid = billid;
            this.billdate = billdate;
            this.billtime = billtime;
            this.mobile = mobile;
            this.amount = amount;
            this.tax = tax;
            this.billamount = billamount;
        }

    }

    class orderdetail {

        String itemname, price, qty, totalprice;

        public orderdetail(String itemname, String price, String qty, String totalprice) {
            this.itemname = itemname;
            this.price = price;
            this.qty = qty;
            this.totalprice = totalprice;
        }

    }

    class ordertablemodel extends AbstractTableModel {

        String[] columns = {"Bill Id", "BillDate", "Bill Time", "Mobile", "Amount", "Tax", "Bill Amount"};

        @Override
        public int getRowCount() {
            return alorder.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return alorder.get(rowIndex).billid;
                case 1:
                    return alorder.get(rowIndex).billdate;
                case 2:
                    return alorder.get(rowIndex).billtime;
                case 3:
                    return alorder.get(rowIndex).mobile;
                case 4:
                    return alorder.get(rowIndex).amount;
                case 5:
                    return alorder.get(rowIndex).tax;
                case 6:
                    return alorder.get(rowIndex).billamount;
                default:
                    return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }
    }

    class detailtablemodel extends AbstractTableModel {

        String[] columns = {"Item Name", "Price", "Qty", "Total Price"};

        @Override
        public int getRowCount() {
            return aldetail.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return aldetail.get(rowIndex).itemname;
                case 1:
                    return aldetail.get(rowIndex).price;
                case 2:
                    return aldetail.get(rowIndex).qty;
                case 3:
                    return aldetail.get(rowIndex).totalprice;
                default:
                    return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            return columns[column];
        }
    }

}
