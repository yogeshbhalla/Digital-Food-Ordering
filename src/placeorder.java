
import java.awt.Dimension;
import java.awt.Toolkit;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.RenderingHints;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Main-Hall
 */
public class placeorder extends javax.swing.JFrame {

    /**
     * Creates new form placeorder
     */
    int screenwidth;
    int screenheight;

    public placeorder() {
        initComponents();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        screenheight = (int) screenSize.getHeight();
        screenwidth = (int) screenSize.getWidth();
        setSize(screenSize);
        jPanel1.setSize(screenwidth, 100);
     
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cbcuisine1 = new javax.swing.JComboBox<>();
        lbcartqty = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbcuisine1.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        cbcuisine1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "Indian", "Chinese", "Italian", "South Indian" }));
        cbcuisine1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbcuisine1ActionPerformed(evt);
            }
        });

        lbcartqty.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/content/carticon.png"))); // NOI18N
        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbcuisine1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 276, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbcartqty, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbcartqty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(cbcuisine1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 910, 90);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel2.setLayout(null);
        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 90, 890, 400);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbcuisine1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbcuisine1ActionPerformed
        // TODO add your handling code here:
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    // TODO add your handling code here:
                    if (cbcuisine1.getSelectedIndex() >= 1) {
                        jPanel2.removeAll();

                        String cuisine = cbcuisine1.getSelectedItem().toString();
                        HttpResponse<String> res = Unirest.get("http://localhost:8888/getcategorybycuisine")
                                .queryString("cuisine", cuisine).asString();
                        String response = res.getBody();
                        StringTokenizer st = new StringTokenizer(response, "~!@");
                        int n = st.countTokens();
                        //panel width 200
                        //panel height 172
                        int cols = screenwidth / 200;
                        int rows = n / cols;
                        rows = (rows == 0) ? 1 : rows;
                        //rows++;
                        jPanel2.setBounds(10, 100, screenwidth, screenheight);
                        //jPanel2.setLayout(new GridLayout(rows, cols, 10, 10));
                        //jPanel2.setLayout(null);
                        int x, y;
                        x = 10;
                        y = 10;
                        CategoryPanel[] cps = new CategoryPanel[n];
                        int i = 0;
                        while (st.hasMoreTokens()) {
                            String row = st.nextToken();
                            StringTokenizer st2 = new StringTokenizer(row, "#$%");
                            String catname = st2.nextToken();
                            String cuisinename = st2.nextToken();
                            String desc = st2.nextToken();
                            String photo = st2.nextToken();
                            cps[i] = new CategoryPanel();
                            cps[i].lbcatname.setText(catname);
                            URL url = new URL("http://localhost:8888/GetResource/" + photo);
                            BufferedImage bufferedImage, newimage;
                            bufferedImage = ImageIO.read(url);
                            newimage = resizephoto(bufferedImage, 180, 130);
                            cps[i].lbcatphoto.setIcon(new ImageIcon(newimage));
                            cps[i].setToolTipText(desc);
                            cps[i].setBounds(x, y, 200, 172);
                            cps[i].addMouseListener(new MouseAdapter() {
                                @Override
                                public void mouseClicked(MouseEvent e) {
                                    //JOptionPane.showMessageDialog(rootPane, catname);
                                    loadfooditems(catname);
                                }

                            });
                            jPanel2.add(cps[i]);
                            jPanel2.repaint();
                            repaint();
                            i++;
                            x = x + 210;
                        }
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }).start();

    }//GEN-LAST:event_cbcuisine1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int showConfirmDialog = JOptionPane.showConfirmDialog(rootPane, "Are your sure?", "Confirmation Dialog",JOptionPane.OK_CANCEL_OPTION);
        if (showConfirmDialog == JOptionPane.OK_OPTION) {
            MyFoodCart obj = new MyFoodCart();

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadfooditems(String catname) {
        new Thread(new Runnable() {
            @Override
            public void run() {

                try {
                    // TODO add your handling code here:

                    jPanel2.removeAll();

                    HttpResponse<String> res = Unirest.get("http://localhost:8888/getfooditems")
                            .queryString("category", catname).asString();
                    String response = res.getBody();
                    StringTokenizer st = new StringTokenizer(response, "~!@");
                    int n = st.countTokens();
                    //panel width 236
                    //panel height 215
                    int cols = screenwidth / 200;
                    int rows = n / cols;
                    rows = (rows == 0) ? 1 : rows;

                    int x, y;
                    x = 10;
                    y = 10;
                    int height = 236;

                    FoodItemPanel1[] cps = new FoodItemPanel1[n];
                    int i = 0;
                    while (st.hasMoreTokens()) {
                        String row = st.nextToken();
                        StringTokenizer st2 = new StringTokenizer(row, "#$%");
                        String itemname = st2.nextToken();
                        String desc = st2.nextToken();
                        String type = st2.nextToken();
                        int price = Integer.parseInt(st2.nextToken());
                        String photo = st2.nextToken();
                        cps[i] = new FoodItemPanel1();
                        cps[i].lblitemname.setText(itemname);
                        cps[i].lblprice.setText("Rs. " + price);
                        cps[i].lbltype.setText(type);

                        URL url = new URL("http://localhost:8888/GetResource/" + photo);
                        BufferedImage bufferedImage, newimage;
                        bufferedImage = ImageIO.read(url);
                        newimage = resizephoto(bufferedImage, 210, 130);
                        cps[i].lbcatphoto.setIcon(new ImageIcon(newimage));
                        cps[i].setToolTipText(desc);
                        cps[i].setBounds(x, y, 236, 215);
                        cps[i].addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                String result = JOptionPane.showInputDialog("Enter Quantity");
                                if (result.equals("") == false) {
                                    try {
                                        int qty = Integer.parseInt(result);
                                        int totalprice = price * qty;
                                        foodcart obj = new foodcart(itemname, type, photo, qty, price, totalprice);
                                        boolean flag = false;
                                        int oldqty = 0;
                                        int index = 0;
                                        for (int k = 0; k <= Global.al1.size() - 1; k++) {
                                            if (Global.al1.get(k).itemname.equals(itemname)) {
                                                flag = true;
                                                oldqty = Global.al1.get(k).quantity;
                                                break;
                                            }
                                            index++;
                                        }
                                        if (flag == false) {
                                            Global.al1.add(obj);
                                        } else {
                                            int newqty = oldqty + qty;
                                            int newprice = newqty * price;
                                            Global.al1.get(index).quantity = newqty;
                                            Global.al1.get(index).totalprice = newprice;
                                        }
                                        lbcartqty.setText(Global.al1.size() + "");
                                        System.out.println(Global.al1);
                                    } catch (NumberFormatException ex1) {
                                        JOptionPane.showMessageDialog(rootPane, "Invalid qty.");
                                    }
                                }
                            }

                        });
                        jPanel2.add(cps[i]);
                        cps[i].repaint();
                        i++;
                        x = x + 246;
                        if (i % 5 == 0) {
                            y = y + 225;
                            x = 10;
                            height += y;
                        }

                        System.out.println("height : " + height + " " + jPanel2.getHeight());
                        jPanel2.repaint();
                        repaint();
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }).start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(placeorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(placeorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(placeorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(placeorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new placeorder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbcuisine1;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lbcartqty;
    // End of variables declaration//GEN-END:variables

    BufferedImage resizephoto(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

}
